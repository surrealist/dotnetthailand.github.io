{"componentChunkName":"component---src-templates-docs-js","path":"/programming-cookbook/github-actions/github-actions-fundamental","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"4707d3a3-475e-5d94-bb8a-20765e7ec347","title":"GitHub Actions fundamental","slug":"/programming-cookbook/github-actions/github-actions-fundamental"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"GitHub Actions fundamental\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true,\n  \"order\": 0\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Reference for Workflow syntax (YAML)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions\"\n  }, \"https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions\"))), mdx(\"h1\", null, \"Workflow commands for GitHub Actions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions\"\n  }, \"https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Actions can communicate with the runner machine to set environment variables, output values used by other actions, add debug messages to the output logs, and other tasks.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Most workflow commands use the echo command in a specific format, while others are invoked by writing to a file.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jobs.<job_id>.steps[*].run\"), \".\")), mdx(\"h1\", null, \"Setting an environment variable\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We can define environment variables at workflow level, job level and step level.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We can set environment variable with a workflow command in \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jobs.<job_id>.steps[*].run\"), \" e.g.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"  run: |\\n\\n    # literal value\\n    echo \\\"action_state=yellow\\\" >> $GITHUB_ENV\\n\\n    # value from a secret\\n    echo \\\"SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}\\\" >> $GITHUB_ENV\\n\")), mdx(\"h1\", null, \"Context and expression syntax for GitHub Actions\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions\"\n  }, \"https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use expression to programmatically set variables in workflow files and access contexts.\\nYou can combine literals, context references, and functions using operators.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Contexts are a way to access information about workflow runs, runner environments, jobs, and steps. Contexts use the expression syntax.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# Expression syntax\\n${{ <expression> }}\\n\\nif: ${{ <expression> }}\\nif: <expression> # You can omit {{ }}\\n\\n# Read context value\\n${{ <context> }}\\n${{ env.VARIABLE_NAME }}\\n\\n\")), mdx(\"h2\", null, \"Useful predefined contexts\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"github.sha\")), mdx(\"h1\", null, \"Environment variables\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.github.com/en/actions/reference/environment-variables\"\n  }, \"https://docs.github.com/en/actions/reference/environment-variables\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To use the value of an environment variable in a workflow file, you should use the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"env\"), \" context.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you want to use the value of an environment variable inside a runner,\\nyou can use the runner operating system's normal method for reading environment variables. e.g. $VARIABLE_NAME\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"# Use environment with`env context and as normal $ENVIRONMENT_VARIABLE\\n\\nenv:\\n  FIRST_NAME: Mona\\nif: env.DAY_OF_WEEK == 'Mon'\\nrun: echo \\\"Hello $FIRST_NAME at ${{ env.DAY_OF_WEEK }}\\\"\\n\")), mdx(\"h1\", null, \"Run job on a specific repository only\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"jobs:\\n  job_id:\\n    name: Job name\\n    if: github.repository == username/repository-name\\n\")), mdx(\"h1\", null, \"Conditional set environment variables\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Useful for switching variables based on a current branch/environment\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.community/t/possible-to-use-conditional-in-the-env-section-of-a-job/135170/3\"\n  }, \"https://github.community/t/possible-to-use-conditional-in-the-env-section-of-a-job/135170/3\"))), mdx(\"h1\", null, \"Ternary workflow expression\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"${{ github.ref == env.MAIN_BRANCH && secrets.PRO_PUBLISH_PROFILE || secrets.DEV_PUBLISH_PROFILE }}\\n\")), mdx(\"h1\", null, \"Run a job based on a condition with if expression\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.blog/changelog/2019-10-01-github-actions-new-workflow-syntax-features/\"\n  }, \"https://github.blog/changelog/2019-10-01-github-actions-new-workflow-syntax-features/\"))), mdx(\"h1\", null, \"Find more virtual environments\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use as value of ``\\n\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/actions/virtual-environments\"\n  }, \"https://github.com/actions/virtual-environments\"))), mdx(\"h1\", null, \"Known issues:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Workflow level environment variables can't be used at job level, it can only be used in step level.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.community/t/how-to-set-and-access-a-workflow-variable/17335/6?u=aaronamm\"\n  }, \"https://github.community/t/how-to-set-and-access-a-workflow-variable/17335/6?u=aaronamm\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Workaround is:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set Environment Var\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Step takes it as input and sets it as the step\\u2019s output.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Environment variable can now be accessed via \\u2018needs\\u2019.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"code example\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"env:\\n  Deploy: 'false'\\n\\njobs:\\n  prejob:\\n    runs-on: ubuntu-latest\\n    outputs:\\n      envvalue: ${{ steps.setvar.outputs.envvar }}\\n    steps:\\n      - name: set value\\n        id: setvar\\n        run: |\\n          echo \\\"::set-output name=envvar::$Deploy\\\"  # get top level env and set it as output\\n  envcheck:\\n    needs: [prejob]\\n    if: ${{needs.prejob.outputs.envvalue=='false'}}  # check env value in job level expression now.\\n    runs-on: [ubuntu-latest]\\n    steps:\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#reference-for-workflow-syntax-yaml","title":"Reference for Workflow syntax (YAML)"},{"url":"#workflow-commands-for-github-actions","title":"Workflow commands for GitHub Actions"},{"url":"#setting-an-environment-variable","title":"Setting an environment variable"},{"url":"#context-and-expression-syntax-for-github-actions","title":"Context and expression syntax for GitHub Actions","items":[{"url":"#useful-predefined-contexts","title":"Useful predefined contexts"}]},{"url":"#environment-variables","title":"Environment variables"},{"url":"#run-job-on-a-specific-repository-only","title":"Run job on a specific repository only"},{"url":"#conditional-set-environment-variables","title":"Conditional set environment variables"},{"url":"#ternary-workflow-expression","title":"Ternary workflow expression"},{"url":"#run-a-job-based-on-a-condition-with-if-expression","title":"Run a job based on a condition with if expression"},{"url":"#find-more-virtual-environments","title":"Find more virtual environments"},{"url":"#known-issues","title":"Known issues:"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"programming-cookbook/github-actions/github-actions-fundamental.md","fields":{"gitLogLatestAuthorName":"aaronamm","gitLogLatestAuthorEmail":"theeranitp@gmail.com","gitLogLatestDate":"3 minutes ago"}},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"f3dfd0ea376624632b10a0a2207a7055a280fcda","date":"2021-03-20 12:45"}},"pageContext":{"id":"4707d3a3-475e-5d94-bb8a-20765e7ec347"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}