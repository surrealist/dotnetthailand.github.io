{"componentChunkName":"component---src-templates-docs-js","path":"/programming-cookbook/git","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"86ef2d1c-a0ec-59e5-8da7-2a4e3b069aae","title":"Git Cookbook","slug":"/programming-cookbook/git"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Git Cookbook\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true,\n  \"order\": 3\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"To untrack all files that already added to a repository and then add to .gitignore later.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Commit any code changes, and then run this command:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git rm -r --cached .\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"This removes any changed files from the index(staging area).\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Explain \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rm\"), \" command\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rm is the remove command\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"-r will allow recursive removal\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u2013cached will only remove files from the index. Your files will still be there.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The . indicates that all files will be untracked. You can untrack a specific file with git rm --cached foo.txt.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The rm command can be unforgiving. If you wish to try what it does beforehand, add the -n or --dry-run flag to test things out.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Then run:\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git add .\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"This add all changes files to a staging area.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Verify what you have changed.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git log\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"This will show all file all ignored file are mark as deleted\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a new commit:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git commit -m \\\".gitignore is now working\\\"\\n\")), mdx(\"p\", null, \"credit \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/\"\n  }, \"https://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Inti\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git init\\n\")), mdx(\"h1\", null, \"Working with Remote\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git config global\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git remote add main url //need remote brance and url\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git remote remove origin //don't need url\\n\")), mdx(\"h1\", null, \"Working with a branch\"), mdx(\"h2\", null, \"Set an existing branch to track a remote branch\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git branch -u upstream/foo\\n\")), mdx(\"h2\", null, \"Untrack a remote branch\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git branch --unset-upstream\\n\")), mdx(\"h2\", null, \"Create a branch based on the current branch\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git checkout -b \\\"new-branch-name\\\"\\n\")), mdx(\"h2\", null, \"Create a branch based on the hash value or relative to the latest commit of the current branch\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git checkout -b \\\"new-branch-name\\\" <sha1-of-commit or HEAD~3>\\n\")), mdx(\"h1\", null, \"Reset/Reverse\"), mdx(\"h2\", null, \"How to reset or revert a file to a specific revision?\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git checkout c5f567 -- file1/to/restore file2/to/restore\\n\\n\")), mdx(\"h2\", null, \"Hard reset of a single file\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"git checkout -- file-name-that-you-deleted\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"--\"), \" basically means: treat every argument after this point as a file name.\\nMore details in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stackoverflow.com/a/6561160/1872200\"\n  }, \"this answer\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#to-untrack-all-files-that-already-added-to-a-repository-and-then-add-to-gitignore-later","title":"To untrack all files that already added to a repository and then add to .gitignore later."},{"url":"#inti","title":"Inti"},{"url":"#working-with-remote","title":"Working with Remote"},{"url":"#working-with-a-branch","title":"Working with a branch","items":[{"url":"#set-an-existing-branch-to-track-a-remote-branch","title":"Set an existing branch to track a remote branch"},{"url":"#untrack-a-remote-branch","title":"Untrack a remote branch"},{"url":"#create-a-branch-based-on-the-current-branch","title":"Create a branch based on the current branch"},{"url":"#create-a-branch-based-on-the-hash-value-or-relative-to-the-latest-commit-of-the-current-branch","title":"Create a branch based on the hash value or relative to the latest commit of the current branch"}]},{"url":"#resetreverse","title":"Reset/Reverse","items":[{"url":"#how-to-reset-or-revert-a-file-to-a-specific-revision","title":"How to reset or revert a file to a specific revision?"},{"url":"#hard-reset-of-a-single-file","title":"Hard reset of a single file"}]}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"programming-cookbook/git.md","fields":{"gitLogLatestAuthorName":"aaronamm","gitLogLatestAuthorEmail":"theeranitp@gmail.com","gitLogLatestDate":"3 minutes ago"}},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"f3dfd0ea376624632b10a0a2207a7055a280fcda","date":"2021-03-20 12:45"}},"pageContext":{"id":"86ef2d1c-a0ec-59e5-8da7-2a4e3b069aae"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}